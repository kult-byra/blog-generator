{"version":3,"sources":["components/assets/img/Kult_logo.svg","components/Navigation.js","components/AddTopicForm.js","components/Header.js","components/ResultCard.js","components/Results.js","components/Generator.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","alt","src","logo","className","AddTopicForm","props","useState","verbInput","setVerbInput","nounInput","setNounInput","onSubmit","e","preventDefault","createTitles","id","type","placeholder","value","onChange","target","Header","verb","noun","ResultCard","copySuccess","setCopySuccess","emoji","setEmoji","refContainer","useRef","readOnly","title","ref","clickbaitScore","onClick","current","select","document","execCommand","focus","setTimeout","role","aria-label","Results","setValue","defaultValue","selected","formsFilled","titleSuggestions","map","titleSuggestion","index","filter","Generator","setFormsFilled","setTitleSuggestions","toLowerCase","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0cff5e72.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Kult_logo.2b1e4805.svg\";","import React from 'react';\nimport logo from './assets/img/Kult_logo.svg';\n\nconst Navigation = () => {\n      return (\n        <nav>\n          <img alt=\"logo\" src={logo} className=\"logo\" />\n          <button className=\"navButton\">Om Kult</button>\n        </nav>\n      )\n  }\n\nexport default Navigation;","import React, { useState } from 'react';\n\n\nconst AddTopicForm = (props) => {\n\n    const [verbInput, setVerbInput] = useState('');\n    const [nounInput, setNounInput] = useState('');\n\n\n  \n\n\n\n        return (\n            <form className=\"inputfields\" onSubmit={(e) => {\n                e.preventDefault();\n                props.createTitles(verbInput, nounInput);\n\n                setVerbInput('');\n                setNounInput('');\n        \n            }}>\n                        <input \n                            id=\"verbInput\" \n                            type=\"text\" \n                            placeholder=\"Verb\" \n                            value={verbInput}    \n                            onChange={e=> setVerbInput(e.target.value)}\n                        />\n                        <input \n                            id=\"nounInput\" \n                            type=\"text\" \n                            placeholder=\"Substantiv\" \n                            value={nounInput}     \n                            onChange={e=> setNounInput(e.target.value)}\n                        />\n                        <input \n                            id=\"createTitleButton\" \n                            type=\"submit\" \n                            value=\"LAG TITLER\" \n                        />\n            </form>\n            \n        )\n    \n\n\n}\n\n\n\n\nexport default AddTopicForm;","\nimport React from 'react';\n\nimport AddTopicForm from './AddTopicForm.js';\n\n\nconst Header = (props) => {\n\n    return (\n      <div className=\"intro\">\n        <div className=\"outer-wrap\">\n          <div className=\"wrap\">\n            <p className=\"introText\">Kult ByrÃ¥s</p>\n            <h1 className=\"heading\">Bloggtittel Generator</h1>\n\n            <AddTopicForm \n                createTitles={props.createTitles}\n                verb={props.verb}\n                noun={props.noun}\n            />\n            \n            <p className=\"help-text\">\n                <strong>F.eks </strong> \"Selge + bil\" eller \"Bake + kake\"                \n            </p>\n          </div>\n        </div>\n      </div>\n      )\n    \n  }\n  \n\n  export default Header;","import React, { useState, useRef } from 'react';\n\n\n\nconst ResultCard = props => {\n    const [copySuccess, setCopySuccess] = useState('Kopier');\n    const [emoji, setEmoji] = useState('ðŸ“„');\n    const [title, setTitle] = useState({props});\n    const [clickbaitScore, setClickbait] = useState({props});\n    const refContainer = useRef(null);\n\n\n\n    return (\n      <div className=\"newResults__card\">\n          <form className=\"newResults__input\">\n            <textarea \n              className=\"newResults__card__input\" \n              type=\"text\" \n              placeholder=\"Bloggtittel\" \n              readOnly value={props.title}\n              ref={refContainer}\n              />\n              \n          </form>\n          <div className=\"newResults__metaData\">\n              <p className=\"clickbait\">Clickbait: {props.clickbaitScore}</p>\n              <button \n                className={copySuccess === 'Kopiert!' ? 'copyButton_new' : 'copyButton_new'}\n                onClick={(e) => {\n                  refContainer.current.select();\n                  document.execCommand('copy');\n                  e.target.focus();\n                  setCopySuccess('Kopiert!');\n                  setEmoji('ðŸ“„');\n\n                  // Reset button text\n                  setTimeout(() => {\n                    setEmoji('ðŸŽ‰');\n                    setCopySuccess('Kopier');\n                  }, 2000);\n\n                }}>\n              \n              <span role=\"img\" aria-label=\"Emoji\">{emoji}</span>{copySuccess}\n              </button>\n          </div>\n        </div>\n    );\n  }\n\n\n\n\n  \n  export default ResultCard;\n\n  ","import React, { useState } from 'react';\nimport ResultCard from './ResultCard.js';\n\n\nconst Results = (props) => {\n\n    const [value, setValue] = useState('all');\n\n\n\n      return (\n        <div className=\"output\">\n          <div className=\"outer-wrap\">\n              <div className=\"wrap\">\n                  <div className=\"results\">\n                      <div className=\"filter\">\n                        <h2>Filtrer:</h2>\n                        <select \n                            defaultValue={value}\n                            onChange={e=> setValue(e.target.value)}>\n                            <option selected value=\"all\">Clickbait-faktor</option>\n                            <option value=\"â˜…â˜…â˜…\">SkamlÃ¸s: â˜…â˜…â˜…</option>\n                            <option value=\"â˜…â˜…\">Middels: â˜…â˜…</option>\n                            <option value=\"â˜…\">Lav: â˜…</option>\n                        </select>\n                      </div>\n                      <div className=\"newResults\">\n                        {/* List of Titles*/}\n                        {value === \"all\" && props.formsFilled === true ? props.titleSuggestions.map( (titleSuggestion, index) =>\n                            <ResultCard\n                                title={titleSuggestion.title}\n                                clickbaitScore={titleSuggestion.clickbaitScore}\n\n                            /> \n                        ) : props.titleSuggestions\n                            .filter( titleSuggestion => titleSuggestion.clickbaitScore === value)\n                            .map( (titleSuggestion, index) => \n                            <ResultCard\n                                title={titleSuggestion.title}\n                                clickbaitScore={titleSuggestion.clickbaitScore}\n\n                            /> \n                        \n                        )}\n                        \n                          \n                      </div>\n                  </div>\n                  <p className=\"heart\"> </p>\n              </div>\n          </div>\n      </div>\n      )\n}   \n\n\nexport default Results;","import React, { useState } from 'react';\nimport Header from './Header.js';\nimport Results from './Results.js';\n\n\nconst Generator = () => {\n\n    const [verb, setVerb] = useState(null);\n    const [noun, setNoun] = useState(null);\n    const [formsFilled, setFormsFilled] = useState(false);\n    const [titleSuggestions, setTitleSuggestions] = useState([]);\n\n\n  \n    const handleCreateTitles = (verbInput, nounInput) => {\n\n\n        let noun = nounInput.toLowerCase();\n        let verb = verbInput.toLowerCase();\n\n        setTitleSuggestions([\n            {\n              title: `Hvorfor det har aldri har vÃ¦rt enklere Ã¥ ${verb} ${noun}`,\n              clickbaitScore: 'â˜…â˜…',\n              id: 1\n            },\n            {\n              title: `En ${noun} med en bisarr (men sann) historie`,\n              clickbaitScore: 'â˜…â˜…â˜…',\n              id: 2\n            },\n            {\n              title: `Skal du ${verb} ${noun}? Dette er ekspertenes rÃ¥d.`,\n              clickbaitScore: 'â˜…',\n              id: 3\n            },\n            {\n              title: `Vurderer du Ã¥ ${verb} ${noun}? Les dette fÃ¸rst.`,\n              clickbaitScore: 'â˜…â˜…',\n              id: 4\n            },\n            {\n              title: `BÃ¸r du ${verb} ${noun}? Ta testen`,\n              clickbaitScore: 'â˜…â˜…',\n              id: 5\n            },\n            {\n              title: `3 bÃ¸ker du mÃ¥ lese om du skal bli god til Ã¥ ${verb} ${noun}`,\n              clickbaitScore: 'â˜…',\n              id: 6\n            },\n            {\n              title: `Skal du ${verb} ${noun}? UnngÃ¥ disse fellene`,\n              clickbaitScore: 'â˜…â˜…',\n              id: 7\n            },\n            {\n              title: `Hemmeligheten bak en fantastisk ${noun}`,\n              clickbaitScore: 'â˜…â˜…',\n              id: 8\n            },\n            {\n              title: `Stor oversikt: Her er det beste innen ${noun}`,\n              clickbaitScore: 'â˜…',\n              id: 9\n            },\n            {\n              title: `Den overraskende grunnen til at alle prater om ${noun}`,\n              clickbaitScore: 'â˜…â˜…â˜…',\n              id: 10\n            },\n            {\n              title: `Hva er (raskeste/beste/billigste) lÃ¸sningen for Ã¥ ${verb} ${noun}.?`,\n              clickbaitScore: 'â˜…â˜…',\n              id: 11\n            },\n            {\n              title: `Hva jeg lÃ¦rte av Ã¥ ${verb} ${noun}`,\n              clickbaitScore: 'â˜…â˜…',\n              id: 12\n            },\n            {\n              title: `NÃ¥r er det lurt Ã¥ ${verb} ${noun}? (Det er ikke det du tror)`,\n              clickbaitScore: 'â˜…â˜…â˜…',\n              id: 13\n            },\n            {\n              title: `8 fakta om ${noun} (som vil snu verdensbildet ditt pÃ¥ hode)`,\n              clickbaitScore: 'â˜…â˜…â˜…',\n              id: 14\n            },\n            {\n              title: `Hva alle burde vite om Ã¥ ${verb} ${noun}`,\n              clickbaitScore: 'â˜…â˜…',\n              id: 13\n            },\n            {\n              title: `Dette bÃ¸r du tenke pÃ¥ nÃ¥r du skal ${verb} ${noun}.`,\n              clickbaitScore: 'â˜…',\n              id: 14\n            },\n            {\n              title: `Sjekkliste fÃ¸r du skal ${verb} ${noun}.`,\n              clickbaitScore: 'â˜…',\n              id: 15\n            },\n            {\n              title: `Myter om ${noun} du sannsynligvis har trodd pÃ¥ hele livet`,\n              clickbaitScore: 'â˜…â˜…â˜…',\n              id: 16\n            },\n            {\n              title: `Slik fÃ¥r du den perfekte ${noun}, uten (noe mÃ¥lgruppen vil unngÃ¥)`,\n              clickbaitScore: 'â˜…â˜…',\n              id: 17\n            },\n          ]);\n        \n        setFormsFilled(true);\n        \n            \n    }\n\n  \n  \n  \n      return(\n        <section className=\"generator\">\n          <Header \n            verb={verb}\n            noun={noun}\n            createTitles={handleCreateTitles}\n          />\n          <Results \n            titleSuggestions={titleSuggestions}\n            formsFilled={formsFilled}\n          />\n        </section>\n      )\n      \n\n  }\n\n\n  export default Generator;","import React from 'react';\nimport Navigation from './Navigation.js';\nimport Generator from './Generator.js';\n\n\nfunction App() {\n \n    return (\n      <div className=\"blogGenerator\">\n          <Navigation />\n          <Generator />\n        )}\n      </div>\n  )\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App.js';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}